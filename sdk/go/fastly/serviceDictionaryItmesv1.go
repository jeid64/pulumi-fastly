// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-fastly/blob/master/website/docs/r/service_dictionary_items_v1.html.markdown.
type ServiceDictionaryItmesv1 struct {
	s *pulumi.ResourceState
}

// NewServiceDictionaryItmesv1 registers a new resource with the given unique name, arguments, and options.
func NewServiceDictionaryItmesv1(ctx *pulumi.Context,
	name string, args *ServiceDictionaryItmesv1Args, opts ...pulumi.ResourceOpt) (*ServiceDictionaryItmesv1, error) {
	if args == nil || args.DictionaryId == nil {
		return nil, errors.New("missing required argument 'DictionaryId'")
	}
	if args == nil || args.ServiceId == nil {
		return nil, errors.New("missing required argument 'ServiceId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dictionaryId"] = nil
		inputs["items"] = nil
		inputs["serviceId"] = nil
	} else {
		inputs["dictionaryId"] = args.DictionaryId
		inputs["items"] = args.Items
		inputs["serviceId"] = args.ServiceId
	}
	s, err := ctx.RegisterResource("fastly:index/serviceDictionaryItmesv1:ServiceDictionaryItmesv1", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceDictionaryItmesv1{s: s}, nil
}

// GetServiceDictionaryItmesv1 gets an existing ServiceDictionaryItmesv1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceDictionaryItmesv1(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceDictionaryItmesv1State, opts ...pulumi.ResourceOpt) (*ServiceDictionaryItmesv1, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dictionaryId"] = state.DictionaryId
		inputs["items"] = state.Items
		inputs["serviceId"] = state.ServiceId
	}
	s, err := ctx.ReadResource("fastly:index/serviceDictionaryItmesv1:ServiceDictionaryItmesv1", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceDictionaryItmesv1{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ServiceDictionaryItmesv1) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ServiceDictionaryItmesv1) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the dictionary that the items belong to
func (r *ServiceDictionaryItmesv1) DictionaryId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dictionaryId"])
}

// A map representing an entry in the dictionary, (key/value)
func (r *ServiceDictionaryItmesv1) Items() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["items"])
}

// The ID of the service that the dictionary belongs to
func (r *ServiceDictionaryItmesv1) ServiceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceId"])
}

// Input properties used for looking up and filtering ServiceDictionaryItmesv1 resources.
type ServiceDictionaryItmesv1State struct {
	// The ID of the dictionary that the items belong to
	DictionaryId interface{}
	// A map representing an entry in the dictionary, (key/value)
	Items interface{}
	// The ID of the service that the dictionary belongs to
	ServiceId interface{}
}

// The set of arguments for constructing a ServiceDictionaryItmesv1 resource.
type ServiceDictionaryItmesv1Args struct {
	// The ID of the dictionary that the items belong to
	DictionaryId interface{}
	// A map representing an entry in the dictionary, (key/value)
	Items interface{}
	// The ID of the service that the dictionary belongs to
	ServiceId interface{}
}
