// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";

export interface ServiceACLEntriesv1Entry {
    comment?: string;
    id: string;
    ip: string;
    negated?: boolean;
    subnet?: string;
}

export interface Servicev1Acl {
    /**
     * The ID of the ACL.
     */
    aclId: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
}

export interface Servicev1Backend {
    address: string;
    autoLoadbalance?: boolean;
    betweenBytesTimeout?: number;
    connectTimeout?: number;
    errorThreshold?: number;
    firstByteTimeout?: number;
    /**
     * Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
     */
    healthcheck?: string;
    maxConn?: number;
    maxTlsVersion?: string;
    minTlsVersion?: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    overrideHost?: string;
    port?: number;
    requestCondition?: string;
    shield?: string;
    sslCaCert?: string;
    sslCertHostname?: string;
    sslCheckCert?: boolean;
    sslCiphers?: string;
    sslClientCert?: string;
    sslClientKey?: string;
    sslHostname?: string;
    sslSniHostname?: string;
    useSsl?: boolean;
    weight?: number;
}

export interface Servicev1Bigquerylogging {
    dataset: string;
    email?: string;
    format?: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    placement?: string;
    projectId: string;
    responseCondition?: string;
    secretKey?: string;
    table: string;
    template?: string;
}

export interface Servicev1Blobstoragelogging {
    accountName: string;
    container: string;
    format?: string;
    formatVersion?: number;
    gzipLevel?: number;
    messageType?: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    path?: string;
    period?: number;
    placement?: string;
    publicKey?: string;
    responseCondition?: string;
    sasToken: string;
    timestampFormat?: string;
}

export interface Servicev1CacheSetting {
    action?: string;
    cacheCondition?: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    staleTtl?: number;
    ttl?: number;
}

export interface Servicev1Condition {
    /**
     * The unique name for the Service to create.
     */
    name: string;
    priority?: number;
    statement: string;
    type: string;
}

export interface Servicev1Dictionary {
    /**
     * The ID of the dictionary.
     */
    dictionaryId: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
}

export interface Servicev1Director {
    backends: string[];
    capacity?: number;
    /**
     * <elided>
     */
    comment?: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    quorum?: number;
    retries?: number;
    shield?: string;
    type?: number;
}

export interface Servicev1Domain {
    /**
     * <elided>
     */
    comment?: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
}

export interface Servicev1Dynamicsnippet {
    /**
     * The unique name for the Service to create.
     */
    name: string;
    priority?: number;
    /**
     * The ID of the dynamic snippet.
     */
    snippetId: string;
    type: string;
}

export interface Servicev1Gcslogging {
    bucketName: string;
    email?: string;
    format?: string;
    gzipLevel?: number;
    messageType?: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    path?: string;
    period?: number;
    placement?: string;
    responseCondition?: string;
    secretKey?: string;
    timestampFormat?: string;
}

export interface Servicev1Gzip {
    cacheCondition?: string;
    contentTypes?: string[];
    extensions?: string[];
    /**
     * The unique name for the Service to create.
     */
    name: string;
}

export interface Servicev1Header {
    action: string;
    cacheCondition?: string;
    destination: string;
    ignoreIfSet?: boolean;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    priority?: number;
    regex: string;
    requestCondition?: string;
    responseCondition?: string;
    source: string;
    substitution: string;
    type: string;
}

export interface Servicev1Healthcheck {
    checkInterval?: number;
    expectedResponse?: number;
    host: string;
    httpVersion?: string;
    initial?: number;
    method?: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    path: string;
    threshold?: number;
    timeout?: number;
    window?: number;
}

export interface Servicev1Logentry {
    format?: string;
    formatVersion?: number;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    placement?: string;
    port?: number;
    responseCondition?: string;
    token: string;
    useTls?: boolean;
}

export interface Servicev1Papertrail {
    address: string;
    format?: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    placement?: string;
    port: number;
    responseCondition?: string;
}

export interface Servicev1RequestSetting {
    action?: string;
    bypassBusyWait?: boolean;
    /**
     * The default hostname.
     */
    defaultHost?: string;
    forceMiss?: boolean;
    forceSsl?: boolean;
    geoHeaders?: boolean;
    hashKeys?: string;
    maxStaleAge?: number;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    requestCondition?: string;
    timerSupport?: boolean;
    xff?: string;
}

export interface Servicev1ResponseObject {
    cacheCondition?: string;
    content?: string;
    contentType?: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    requestCondition?: string;
    response?: string;
    status?: number;
}

export interface Servicev1S3logging {
    bucketName: string;
    /**
     * A set of Domain names to serve as entry points for your
     * Service. Defined below.
     */
    domain?: string;
    format?: string;
    formatVersion?: number;
    gzipLevel?: number;
    messageType?: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    path?: string;
    period?: number;
    placement?: string;
    redundancy?: string;
    responseCondition?: string;
    s3AccessKey?: string;
    s3SecretKey?: string;
    timestampFormat?: string;
}

export interface Servicev1Snippet {
    content: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    priority?: number;
    type: string;
}

export interface Servicev1Splunk {
    format?: string;
    formatVersion?: number;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    placement?: string;
    responseCondition?: string;
    token: string;
    url: string;
}

export interface Servicev1Sumologic {
    format?: string;
    formatVersion?: number;
    messageType?: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    placement?: string;
    responseCondition?: string;
    url: string;
}

export interface Servicev1Syslog {
    address: string;
    format?: string;
    formatVersion?: number;
    messageType?: string;
    /**
     * The unique name for the Service to create.
     */
    name: string;
    placement?: string;
    port?: number;
    responseCondition?: string;
    tlsCaCert?: string;
    tlsHostname?: string;
    token?: string;
    useTls?: boolean;
}

export interface Servicev1Vcl {
    content: string;
    main?: boolean;
    /**
     * The unique name for the Service to create.
     */
    name: string;
}
