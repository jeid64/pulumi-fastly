// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";

export interface ServiceACLEntriesv1Entry {
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ip: pulumi.Input<string>;
    negated?: pulumi.Input<boolean>;
    subnet?: pulumi.Input<string>;
}

export interface Servicev1Acl {
    /**
     * The ID of the ACL.
     */
    aclId?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
}

export interface Servicev1Backend {
    address: pulumi.Input<string>;
    autoLoadbalance?: pulumi.Input<boolean>;
    betweenBytesTimeout?: pulumi.Input<number>;
    connectTimeout?: pulumi.Input<number>;
    errorThreshold?: pulumi.Input<number>;
    firstByteTimeout?: pulumi.Input<number>;
    /**
     * Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
     */
    healthcheck?: pulumi.Input<string>;
    maxConn?: pulumi.Input<number>;
    maxTlsVersion?: pulumi.Input<string>;
    minTlsVersion?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    overrideHost?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    requestCondition?: pulumi.Input<string>;
    shield?: pulumi.Input<string>;
    sslCaCert?: pulumi.Input<string>;
    sslCertHostname?: pulumi.Input<string>;
    sslCheckCert?: pulumi.Input<boolean>;
    sslCiphers?: pulumi.Input<string>;
    sslClientCert?: pulumi.Input<string>;
    sslClientKey?: pulumi.Input<string>;
    sslHostname?: pulumi.Input<string>;
    sslSniHostname?: pulumi.Input<string>;
    useSsl?: pulumi.Input<boolean>;
    weight?: pulumi.Input<number>;
}

export interface Servicev1Bigquerylogging {
    dataset: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    placement?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    responseCondition?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    table: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}

export interface Servicev1Blobstoragelogging {
    accountName: pulumi.Input<string>;
    container: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    formatVersion?: pulumi.Input<number>;
    gzipLevel?: pulumi.Input<number>;
    messageType?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    placement?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    responseCondition?: pulumi.Input<string>;
    sasToken: pulumi.Input<string>;
    timestampFormat?: pulumi.Input<string>;
}

export interface Servicev1CacheSetting {
    action?: pulumi.Input<string>;
    cacheCondition?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    staleTtl?: pulumi.Input<number>;
    ttl?: pulumi.Input<number>;
}

export interface Servicev1Condition {
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    statement: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface Servicev1Dictionary {
    /**
     * The ID of the dictionary.
     */
    dictionaryId?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
}

export interface Servicev1Director {
    backends: pulumi.Input<pulumi.Input<string>[]>;
    capacity?: pulumi.Input<number>;
    /**
     * <elided>
     */
    comment?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    quorum?: pulumi.Input<number>;
    retries?: pulumi.Input<number>;
    shield?: pulumi.Input<string>;
    type?: pulumi.Input<number>;
}

export interface Servicev1Domain {
    /**
     * <elided>
     */
    comment?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
}

export interface Servicev1Dynamicsnippet {
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    /**
     * The ID of the dynamic snippet.
     */
    snippetId?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface Servicev1Gcslogging {
    bucketName: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    gzipLevel?: pulumi.Input<number>;
    messageType?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    placement?: pulumi.Input<string>;
    responseCondition?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    timestampFormat?: pulumi.Input<string>;
}

export interface Servicev1Gzip {
    cacheCondition?: pulumi.Input<string>;
    contentTypes?: pulumi.Input<pulumi.Input<string>[]>;
    extensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
}

export interface Servicev1Header {
    action: pulumi.Input<string>;
    cacheCondition?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    ignoreIfSet?: pulumi.Input<boolean>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    regex?: pulumi.Input<string>;
    requestCondition?: pulumi.Input<string>;
    responseCondition?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    substitution?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface Servicev1Healthcheck {
    checkInterval?: pulumi.Input<number>;
    expectedResponse?: pulumi.Input<number>;
    host: pulumi.Input<string>;
    httpVersion?: pulumi.Input<string>;
    initial?: pulumi.Input<number>;
    method?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    path: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    window?: pulumi.Input<number>;
}

export interface Servicev1Logentry {
    format?: pulumi.Input<string>;
    formatVersion?: pulumi.Input<number>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    placement?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    responseCondition?: pulumi.Input<string>;
    token: pulumi.Input<string>;
    useTls?: pulumi.Input<boolean>;
}

export interface Servicev1Papertrail {
    address: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    placement?: pulumi.Input<string>;
    port: pulumi.Input<number>;
    responseCondition?: pulumi.Input<string>;
}

export interface Servicev1RequestSetting {
    action?: pulumi.Input<string>;
    bypassBusyWait?: pulumi.Input<boolean>;
    /**
     * The default hostname.
     */
    defaultHost?: pulumi.Input<string>;
    forceMiss?: pulumi.Input<boolean>;
    forceSsl?: pulumi.Input<boolean>;
    geoHeaders?: pulumi.Input<boolean>;
    hashKeys?: pulumi.Input<string>;
    maxStaleAge?: pulumi.Input<number>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    requestCondition?: pulumi.Input<string>;
    timerSupport?: pulumi.Input<boolean>;
    xff?: pulumi.Input<string>;
}

export interface Servicev1ResponseObject {
    cacheCondition?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    requestCondition?: pulumi.Input<string>;
    response?: pulumi.Input<string>;
    status?: pulumi.Input<number>;
}

export interface Servicev1S3logging {
    bucketName: pulumi.Input<string>;
    /**
     * A set of Domain names to serve as entry points for your
     * Service. Defined below.
     */
    domain?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    formatVersion?: pulumi.Input<number>;
    gzipLevel?: pulumi.Input<number>;
    messageType?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    placement?: pulumi.Input<string>;
    redundancy?: pulumi.Input<string>;
    responseCondition?: pulumi.Input<string>;
    s3AccessKey?: pulumi.Input<string>;
    s3SecretKey?: pulumi.Input<string>;
    timestampFormat?: pulumi.Input<string>;
}

export interface Servicev1Snippet {
    content: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface Servicev1Splunk {
    format?: pulumi.Input<string>;
    formatVersion?: pulumi.Input<number>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    placement?: pulumi.Input<string>;
    responseCondition?: pulumi.Input<string>;
    token: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface Servicev1Sumologic {
    format?: pulumi.Input<string>;
    formatVersion?: pulumi.Input<number>;
    messageType?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    placement?: pulumi.Input<string>;
    responseCondition?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface Servicev1Syslog {
    address: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    formatVersion?: pulumi.Input<number>;
    messageType?: pulumi.Input<string>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
    placement?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    responseCondition?: pulumi.Input<string>;
    tlsCaCert?: pulumi.Input<string>;
    tlsHostname?: pulumi.Input<string>;
    token?: pulumi.Input<string>;
    useTls?: pulumi.Input<boolean>;
}

export interface Servicev1Vcl {
    content: pulumi.Input<string>;
    main?: pulumi.Input<boolean>;
    /**
     * The unique name for the Service to create.
     */
    name: pulumi.Input<string>;
}
