// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-fastly/blob/master/website/docs/r/service_dynamic_snippet_content_v1.html.markdown.
 */
export class ServiceDynamicSnippetContentv1 extends pulumi.CustomResource {
    /**
     * Get an existing ServiceDynamicSnippetContentv1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceDynamicSnippetContentv1State, opts?: pulumi.CustomResourceOptions): ServiceDynamicSnippetContentv1 {
        return new ServiceDynamicSnippetContentv1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/serviceDynamicSnippetContentv1:ServiceDynamicSnippetContentv1';

    /**
     * Returns true if the given object is an instance of ServiceDynamicSnippetContentv1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceDynamicSnippetContentv1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceDynamicSnippetContentv1.__pulumiType;
    }

    /**
     * The contents of the VCL dynamic snippet
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * Service Id
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * Snippet Id
     */
    public readonly snippetId!: pulumi.Output<string>;

    /**
     * Create a ServiceDynamicSnippetContentv1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceDynamicSnippetContentv1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceDynamicSnippetContentv1Args | ServiceDynamicSnippetContentv1State, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ServiceDynamicSnippetContentv1State | undefined;
            inputs["content"] = state ? state.content : undefined;
            inputs["serviceId"] = state ? state.serviceId : undefined;
            inputs["snippetId"] = state ? state.snippetId : undefined;
        } else {
            const args = argsOrState as ServiceDynamicSnippetContentv1Args | undefined;
            if (!args || args.content === undefined) {
                throw new Error("Missing required property 'content'");
            }
            if (!args || args.serviceId === undefined) {
                throw new Error("Missing required property 'serviceId'");
            }
            if (!args || args.snippetId === undefined) {
                throw new Error("Missing required property 'snippetId'");
            }
            inputs["content"] = args ? args.content : undefined;
            inputs["serviceId"] = args ? args.serviceId : undefined;
            inputs["snippetId"] = args ? args.snippetId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ServiceDynamicSnippetContentv1.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceDynamicSnippetContentv1 resources.
 */
export interface ServiceDynamicSnippetContentv1State {
    /**
     * The contents of the VCL dynamic snippet
     */
    readonly content?: pulumi.Input<string>;
    /**
     * Service Id
     */
    readonly serviceId?: pulumi.Input<string>;
    /**
     * Snippet Id
     */
    readonly snippetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceDynamicSnippetContentv1 resource.
 */
export interface ServiceDynamicSnippetContentv1Args {
    /**
     * The contents of the VCL dynamic snippet
     */
    readonly content: pulumi.Input<string>;
    /**
     * Service Id
     */
    readonly serviceId: pulumi.Input<string>;
    /**
     * Snippet Id
     */
    readonly snippetId: pulumi.Input<string>;
}
